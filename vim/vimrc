set nocompatible

" Packages
call micropack#init('~/.vim/pack/madx', [
  \ 'https://github.com/sheerun/vim-polyglot',
  \ 'https://github.com/sainnhe/sonokai',
  \ 'https://github.com/mileszs/ack.vim',
  \ 'https://github.com/ctrlpvim/ctrlp.vim',
  \ 'https://github.com/tpope/vim-surround',
  \ 'https://github.com/tomtom/tcomment_vim',
  \ 'https://github.com/Raimondi/delimitMate',
  \ 'https://github.com/editorconfig/editorconfig-vim',
  \ 'https://github.com/sbdchd/neoformat',
  \ 'https://github.com/neomake/neomake',
  \ 'https://github.com/junegunn/vim-easy-align',
  \ 'https://github.com/junegunn/goyo.vim',
  \ 'https://github.com/itchyny/lightline.vim',
  \ 'https://github.com/madx/vim-plugins',
  \ 'https://github.com/prabirshrestha/vim-lsp',
  \ 'https://github.com/mattn/vim-lsp-settings',
  \ 'https://github.com/prabirshrestha/asyncomplete.vim',
  \ 'https://github.com/prabirshrestha/asyncomplete-lsp.vim',
  \ 'https://github.com/prabirshrestha/asyncomplete-buffer.vim',
  \ 'https://github.com/prabirshrestha/asyncomplete-file.vim',
\ ])

" UI
syntax on                " Enable syntax highlighting
set shortmess+=I         " Hide intro message
set ruler                " Show line and column position
set showcmd              " Show current command
set laststatus=2         " Always show the status line
let mapleader = ','      " Set , as the Leader key
set statusline=\ %<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P\
set signcolumn=number
set number
set nowrap

set hidden       " Do not unload abandoned buffers
set nojoinspaces " Do not insert two spaces after punctuation
set splitbelow
set splitright

if (has("termguicolors"))
  set termguicolors      " 24-bit color support in terminal
endif
let g:sonokai_style = 'andromeda'
let g:sonokai_enable_italic = 0
let g:sonokai_disable_italic_comment = 0
let g:sonokai_transparent_background = 1
packadd! sonokai
colorscheme sonokai " Set color scheme
highlight! link LineNr Comment
highlight! SpellBad   guifg=#202020 guibg=#fb9fb1
highlight! SpellLocal guifg=#202020 guibg=#12cfc0
highlight! SpellCap   guifg=#202020 guibg=#6fc2ef
highlight! SpellRare  guifg=#202020 guibg=#e1a3ee

function! s:sonokai_custom() abort
  let s:configuration = sonokai#get_configuration()
  let s:palette = sonokai#get_palette(s:configuration.style)

  call sonokai#highlight('VertSplit', s:palette.bg0, s:palette.none)
  call sonokai#highlight('LineNr', s:palette.bg4, s:palette.none)
endfunction

augroup SonokaiCustom
  autocmd!
  autocmd ColorScheme sonokai call s:sonokai_custom()
augroup END

colorscheme sonokai

let &t_SI .= "\e[5 q" " Blinking bar in insert mode
let &t_EI .= "\e[2 q" " Solid block elsewhere

" Whitespace
set autoindent
set smartindent
set scrolloff=5  " Keep 5 lines above or below current one when going near buffer edges
set tabstop=2
set shiftwidth=2
set expandtab
set nowrap
set smarttab

set list
set listchars=nbsp:␣,trail:⋅
set fillchars=vert:\┃,fold:-

" No backup/swap files
set nobackup
set backupdir=
set directory=
set nowritebackup
set noswapfile

" Search
set nohlsearch
set incsearch
set ignorecase
set smartcase

" Mouse is fine
set mouse=a
if !has("nvim")
  set ttymouse=sgr
endif
set virtualedit=block

" Ignores
set wildignore+=tmp/*
set wildignore+=app/assets/images/*
set wildignore+=public/images/*
set wildignore+=.git/*
set wildignore+=.svn/*

" Friendly netrw browsing
let g:netrw_liststyle = 3
let g:netrw_banner = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Custom Mappings

nnoremap <Space> .
nnoremap ' `
nnoremap ` '

" Copy/paste
vnoremap <Leader>C "*y
vnoremap <Leader>X "*d
noremap  <Leader>V "*p

" Commenting
nmap <Leader>c gcc
vmap <Leader>c gc

" File navigation
nmap <Leader>aa :next<crt
nmap <Leader>aA :prev<cr>

" Buffer navigation
nmap <Leader>bb :bnext<cr>
nmap <Leader>bB :bprevious<cr>

" Quickfix navigation
nmap <Leader>qq :cnext<cr>zz
nmap <Leader>qQ :cprevious<cr>zz

" Location navigation
nmap <Leader>ll :lnext<cr>zz
nmap <Leader>lL :lprevious<cr>zz

" Conflict resolution
nmap <Leader>in /^\(<<<<\\|====\\|>>>>\)<cr>
nmap <Leader>ip ?^\(<<<<\\|====\\|>>>>\)<cr>

" Formatting edit shortcuts
map Q gq
nnoremap < <<
nnoremap > >>

" Quick navigation
noremap <C-J> J^
noremap <C-K> kJ^
noremap J 10j
noremap K 10k

" Easy window management
nmap <silent> <leader>w<Space> :call WMFocusMasterWindow()<CR>
nmap <silent> <leader>w<CR>    :call WMSwapWithMasterWindow()<CR>
nmap <silent> <leader>wm       :call WMMarkWindowSwap()<CR>
nmap <silent> <leader>wx       :call WMDoWindowSwap()<CR>
nmap <silent> <leader>wt       :call WMReStack()<CR>
nmap <silent> <leader>w        <C-w>
nmap <silent> <C-Left>         <C-w>h
nmap <silent> <C-Down>         <C-w>j
nmap <silent> <C-Up>           <C-w>k
nmap <silent> <C-Right>        <C-w>l

" Insert current date
nmap <Leader>d "=strftime("%F")<CR>pa

" Todo management:
" td: done, tu: urgent, tn: normal, tc: category, tt: new item
nmap <Leader>td ^r✔yy)Pw<Leader>d <Esc>''"_dd
nmap <Leader>tu ^r+
nmap <Leader>tn ^r-
nmap <Leader>tc ^r=
nmap <Leader>tt o-<Space>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" MISC

" Expand %% to dir of current file
cmap %% <C-R>=expand('%:h').'/'<cr>

" Trim whitespace at line ends
map <F2> <Esc>:%s/\s\+$//<CR>
com! Trim exe "%s/\\s\\+$//"
com! Date exe "r!date +'date: \\%FT\\%R\\%:z'"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" PLUGINS

"-------------------------------------------------------------------------------
" ack.vim
let g:ackprg = 'rg --vimgrep --smart-case'
cnoreabbrev ag Ack
cnoreabbrev aG Ack
cnoreabbrev Ag Ack
cnoreabbrev AG Ack

" Search for word under cursor
nmap <Leader>S yiw:Ag <C-R>"<cr>
vmap <Leader>S :<C-W>Ag <C-R>*<cr>

"-------------------------------------------------------------------------------
"  ctrlp.vim
let g:ctrlp_user_command = 'rg %s --files --glob "" --color never'
let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_map = ''

nmap <Leader>oo :CtrlP<cr>
nmap <Leader>of :CtrlPMixed<cr>
nmap <Leader>ob :CtrlPBuffer<cr>
nmap <Leader>or :CtrlPMRU<cr>

"-------------------------------------------------------------------------------
" EasyAlign
vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

"-------------------------------------------------------------------------------
" neomake
autocmd VimEnter * call neomake#configure#automake('nrw')

"-------------------------------------------------------------------------------
" lightline.vim
let g:lightline = {
  \ 'colorscheme': 'sonokai',
  \ 'component': {
  \   'filename': '%<%f',
  \   'modified': '%{&modified?"🟡":""}'
  \ },
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'filename' ] ],
  \   'right': [ [ 'lineinfo' ],
  \              [ 'readonly', 'modified' ] ]
  \ },
  \ 'inactive': {
  \   'left': [ [ 'relativepath' ] ],
  \   'right': [ [ 'lineinfo' ], ['modified'] ]
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' }
\}

"-------------------------------------------------------------------------------
" vim-lsp
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> <Leader>g<Space> <plug>(lsp-code-action)
    nmap <buffer> <Leader>gd <plug>(lsp-definition)
    nmap <buffer> <Leader>gs <plug>(lsp-document-symbol-search)
    nmap <buffer> <Leader>gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> <Leader>gf <plug>(lsp-references)
    nmap <buffer> <Leader>gi <plug>(lsp-implementation)
    nmap <buffer> <Leader>gt <plug>(lsp-type-definition)
    nmap <buffer> <Leader>gR <plug>(lsp-rename)
    nmap <buffer> <Leader>gp <plug>(lsp-previous-diagnostic)
    nmap <buffer> <Leader>gn <plug>(lsp-next-diagnostic)
    nmap <buffer> <Leader>gg <plug>(lsp-hover)
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    let g:lsp_diagnostics_enabled = 0 " Let Neomake handle diagnostics
    let g:lsp_diagnostics_signs_enabled = 0 " Disable signs
endfunction

augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

"-------------------------------------------------------------------------------
" asyncomplete.vim
function! s:prev_is_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>prev_is_space() ? "\<Tab>" :
  \ asyncomplete#force_refresh()
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" VIM PROJECT FILES
let s:vimprojfile = findfile('.vimproject', '.;')
if !empty(s:vimprojfile)
  exec 'source '.fnameescape(s:vimprojfile)
endif
